df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Decision Trees/Archivos csv/Classification+preprocessed+data+R', header = TRUE)
df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Decision Trees/Archivos csv/Classification+preprocessed+data+R.csv', header = TRUE)
str(df)
str(df)
View(df)
glm.fit = glm(Sold~price, data=df, family = binomial())
View(df)
str(df)
df['price'] <- df['ï..price']
rm(df['ï..price'])
View(df)
rm(select(ï..price))
rm(select('ï..price'))
View(df)
df <- df[,-1]
glm.fit = glm(Sold~price, data=df, family = binomial())
summary(glm.fit)
summary(glm.fit)
View(glm.fit)
# Importando datos
df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Regresion Logistica/Archivos csv/Classification+preprocessed+data+R.csv', header = TRUE)
str(df)
df['price'] <- df['ï..price']
df <- df[,-1]
glm.fit = glm(Sold~price, data=df, family = binomial())
summary(glm.fit)
# Regresion Logistica Multiple
glm.fit = glm(Sold~., data=df, family = binomial())
summary(glm.fit)
summary(glm.fit)
glm.probs = predict(glm.fit, type = 'response')
glm.probs[1:10]
glm.predict =rep('NO',506)
glm.predict(glm.probs > 0.5) = 'YES'
glm.predict[glm.probs > 0.5] = 'YES'
table(glm.predict,df$Sold)
# Analisis Discriminante Lineal
library(MASS)
# Analisis Discriminante Lineal
lda.fit = lda(Sold~., data = df)
lda.fit
lda.pred = predict(lda.fit, df)
View(lda.pred)
lda.pred$posterior
lda.class = lda.pred$class
table(lda.class, df$Sold)
sum(lda.pred$posterior[,1] > 0.8)
# Anlisis Discriminante Cuadratico
qda.fit = qda(Sold~., data = df)
qda.fit
qda.pred = predict(qda.fit, df)
qda.pred$posterior
qda.class = qda.pred$class
table(qda.class, df$Sold)
sum(qda.pred$posterior[,1] > 0.8)
# Train-Test-Split
library(caTools)
# Train-Test-Split
set.seed(0)
split = sample.split(df, SplitRatio = 0.8)
train_set = subset(df, split == TRUE)
test_set = subset(df, split == FALSE )
train.fit = glm(Sold~., data = train_set, family = binomial())
test_probs = predict(train.fit, test_set, type = 'response')
test.pred = rep('NO', 120)
test.pred(test_probs > 0.5) == 'YES'
table(test.pred, test_set$Sold)
test.pred(test_probs > 0.5) == 'YES'
table(test.pred, test_set$Sold)
train.fit = glm(Sold~., data = train_set, family = binomial)
test_probs = predict(train.fit, test_set, type = 'response')
test.pred = rep('NO', 120)
test.pred(test_probs > 0.5) == 'YES'
table(test.pred, test_set$Sold)
test.pred(test_probs > 0.5) = 'YES'
test.pred(test_probs>0.5) = 'YES'
test.pred[test_probs>0.5] = 'YES'
table(test.pred, test_set$Sold)
# K-Nearest Neighbors
library(class)
View(train.fit)
View(train_set)
# K-Nearest Neighbors
trainX = train_set[,-15]
View(trainX)
View(test_set)
testX = test_set[,-15]
triny = train_set$Sold
testy = test_set$Sold
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
rm(triny)
trainy = train_set$Sold
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
k = 3
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
k = 1
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
# Importando librerias
# library(caTools) # Train-Test-Split
library(class) # K-Nearest Neighbors
# Importando datos
df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Regresion Logistica/Archivos csv/Classification+preprocessed+data+R.csv', header = TRUE)
str(df)
df['price'] <- df['ï..price']
df <- df[,-1]
# K-Nearest Neighbors
trainX = train_set[,-15]
View(df)
# K-Nearest Neighbors
trainX = df[,-15]
testX = df[,-15]
trainy = df$Sold
testy = df$Sold
k = 1
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
# Importando librerias
library(caTools) # Train-Test-Split
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
# K-Nearest Neighbors
trainX = df[,-15]
testX = df[,-15]
trainy = df$Sold
testy = df$Sold
k = 1
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
k = 3
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
# Importando datos
df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Regresion Logistica/Archivos csv/Classification+preprocessed+data+R.csv', header = TRUE)
str(df)
df['price'] <- df['ï..price']
df <- df[,-1]
# Regresion Logistica simple
glm.fit = glm(Sold~price, data=df, family = binomial())
summary(glm.fit)
# Regresion Logistica Multiple
glm.fit = glm(Sold~., data=df, family = binomial())
summary(glm.fit)
glm.probs = predict(glm.fit, type = 'response')
glm.probs[1:10]
glm.predict = rep('NO',506)
glm.predict[glm.probs > 0.5] = 'YES'
table(glm.predict,df$Sold)
# Importando librerias
library(MASS) # LDA
# Importando datos
df <- read.csv('C:/Users/Raf/Documents/R/Algoritmos hechos por mi/3. Regresion Logistica/Archivos csv/Classification+preprocessed+data+R.csv', header = TRUE)
df['price'] <- df['ï..price']
df <- df[,-1]
#  Analisis Discriminante Lineal
lda.fit = lda(Sold~., data = df)
lda.fit
lda.pred = predict(lda.fit, df)
lda.pred$posterior
lda.class = lda.pred$class
table(lda.class, df$Sold)
sum(lda.pred$posterior[,1] > 0.8)
# Anlisis Discriminante Cuadratico
qda.fit = qda(Sold~., data = df)
qda.fit
qda.pred = predict(qda.fit, df)
qda.pred$posterior
qda.class = qda.pred$class
table(qda.class, df$Sold)
sum(qda.pred$posterior[,1] > 0.8)
# Importando librerias
library(caTools) # Train-Test-Split
# Train-Test-Split
set.seed(0)
split = sample.split(df, SplitRatio = 0.8)
train_set = subset(df, split == TRUE)
test_set = subset(df, split == FALSE )
train.fit = glm(Sold~., data = train_set, family = binomial)
test_probs = predict(train.fit, test_set, type = 'response')
test.pred = rep('NO', 120)
test.pred[test_probs>0.5] = 'YES'
table(test.pred, test_set$Sold)
# Importando librerias
library(class) # K-Nearest Neighbors
# K-Nearest Neighbors
trainX = train_set[,-15]
testX = test_set[,-15]
trainy = train_set$Sold
testy = test_set$Sold
k = 1
trainX_s = scale(trainX)
testX_s = scale(testX)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
set.seed(0)
knn.pred = knn(trainX_s, testX_s, trainy, k = k)
table(knn.pred, testy)
