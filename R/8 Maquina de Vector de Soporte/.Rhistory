# Impportar datos
movie <- read.csv("C:/Users/Raf/Documents/R/8 Maquina de Vector de Soporte/Movie_classification", header = TRUE)
# Impportar datos
movie <- read.csv("C:/Users/Raf/Documents/R/8 Maquina de Vector de Soporte/Movie_classification.csv", header = TRUE)
View(movie)
# Pre-procesamiento de datos
summary(movie)
# Pre-procesamiento de datos
summary(movie)
movie$Time_taken[is.na(movie$Time_taken)] <- mean(movie$Time_taken.rm=TRUE)
movie$Time_taken[is.na(movie$Time_taken)] <- mean(movie$Time_taken.rm = TRUE)
movie$Time_taken[is.na(movie$Time_taken)] <- mean(movie$Time_taken,na.rm = TRUE)
summary(movie$Time_taken)
# Test-Train Split
library(caTools)
split = sample.split(movie, SplitRatio = 0.8)
trainc = subset(movie, split == TRUE)
testc = subset(movie,split == FALSE)
# Para clasificacion
trainc$Start_Tech_Oscar <- as.factor(trainc$Start_Tech_Oscar)
testc$Start_Tech_Oscar <- as.factor(testc$Start_Tech_Oscar)
#  importando librerias relevantes
library(e1071)
svmfit = svm(Start_Tech_Oscar~., data=trainc, kernel = "linear",cost = 1, scale = TRUE)
summary(svmfit)
# prediccion en test set
ypred = predict(svmfit,testc)
table(predict = ypred, truth = testc$Start_Tech_Oscar)
66/106
# ver los vectores soportes
svmfit$index
table(predict = ypred, truth = testc$Start_Tech_Oscar)
66/106
# ver los vectores soportes
svmfit$index
tune.out = tune(svm, Start_Tech_Oscar~., data = trainc, kernel = "linear", ranges = list(cost=c(0.001,0.01,0.1,1,10,100)))
View(tune.out)
View(tune.out)
bestmod =tune.out$best.model
summary(bestmod)
ypredL = predict(bestmod, testc)
table( predict = ypredL, truth = testc$Start_Tech_Oscar)
65/106
# Kernel Polimonial
svmfitP = svm(Start_Tech_Oscar~., data=trainc, kernel = "polinomial",cost = 1, degree=2)
# Kernel Polimonial
svmfitP = svm(Start_Tech_Oscar~., data=trainc, kernel = "polynomial",cost = 1, degree=2)
# Ajustando el Hiper-parametro
tune.outP = tune(svm, Start_Tech_Oscar~., data = trainc, cross=4, kernel = "polynomial", ranges = list(cost=c(0.001,0.01,0.1,1,10,100)))
bestmodP =tune.out$best.model
summary(bestmodP)
bestmodP =tune.outP$best.model
summary(bestmodP)
ypredP = predict(bestmodP, testc)
table( predict = ypredP, truth = testc$Start_Tech_Oscar)
# Ajustando el Hiper-parametro
tune.outP = tune(svm, Start_Tech_Oscar~., data = trainc, cross=4, kernel = "polynomial", ranges = list(cost=c(0.001,0.01,0.1,1,5,10)),degree=c(0.5,1,2,3,5))
bestmodP = tune.outP$best.model
summary(bestmodP)
ypredP = predict(bestmodP, testc)
table( predict = ypredP, truth = testc$Start_Tech_Oscar)
# Ajustando el Hiper-parametro
tune.outP = tune(svm, Start_Tech_Oscar~., data = trainc, cross=4, kernel = "polynomial", ranges = list(cost=c(0.001,0.01,0.1,1,5,10),degree=c(0.5,1,2,3,5)))
bestmodP = tune.outP$best.model
summary(bestmodP)
bestmodP = tune.outP$best.model
summary(bestmodP)
ypredP = predict(bestmodP, testc)
table( predict = ypredP, truth = testc$Start_Tech_Oscar)
63/106
# Kernel Radial
svmfitR = svm(Start_Tech_Oscar~., data=trainc, kernel = "radial",gamma=1,cost = 1)
# Ajustando el Hiper-parametro
tune.outR = tune(svm, Start_Tech_Oscar~., data = trainc, kernel = "radial", ranges = list(cost=c(0.001,0.01,0.1,1,5,10), gamma=c(0.01,0.1,0.5,1,2,3,4,10,50)),cross=4)
bestmodR = tune.outR$best.model
summary(bestmodR)
ypredR = predict(bestmodR, testc)
table( predict = ypredR, truth = testc$Start_Tech_Oscar)
64/106
#  Importar Datos
df <- read.csv("C:/Users/Raf/Documents/R/8 Maquina de Vector de Soporte/Movie_regression.csv", header = TRUE)
# Pre-procesamiento de datos
summary(df)
df$Time_taken[is.na(df$Time_taken)] <- mean(df$Time_taken,na.rm=TRUE)
summary(df$Time_taken)
# Test Train Split
library(caTools)
set.seed(0)
split = sample.split(movie,SplitRatio = 0.8)
train = subset(df,split == TRUE)
test = subset(df, split == FALSE)
library(e1071)
svmfit = svm(Collection~., data = train, kernel = "linear", cost=0.01, scale = TRUE)
summary(svmfit)
# Prediccion Tet set
ypred = predict(svmfit, test)
mse <- mean((ypred-test$Collection)^2)
# svmfit = svm(Collection~., data = train, kernel = "linear", cost=0.01, scale = TRUE)
svmfit = svm(Collection~., data = train, kernel = "radial", cost=0.01, scale = TRUE)
summary(svmfit)
# Prediccion Tet set
ypred = predict(svmfit, test)
mse <- mean((ypred-test$Collection)^2)
# svmfit = svm(Collection~., data = train, kernel = "linear", cost=0.01, scale = TRUE)
svmfit = svm(Collection~., data = train, kernel = "radial", cost=0.01, gamma=1,scale = TRUE)
summary(svmfit)
# Prediccion Tet set
ypred = predict(svmfit, test)
mse <- mean((ypred-test$Collection)^2)
mseR <- mean((ypred-test$Collection)^2)
svmfit = svm(Collection~., data = train, kernel = "linear", cost=0.01, scale = TRUE)
# svmfit = svm(Collection~., data = train, kernel = "radial", cost=0.01, gamma=1,scale = TRUE)
summary(svmfit)
# Prediccion Tet set
ypred = predict(svmfit, test)
mseL <- mean((ypred-test$Collection)^2)
rm(mse)
